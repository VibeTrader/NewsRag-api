name: 'Deploy Infrastructure (Multi-Region)'

on:
  push:
    branches:
      - main
      - dev
    paths:
      - 'terraform/**'
  workflow_dispatch:
    inputs:
      action:
        description: 'Terraform action'
        required: true
        default: 'apply'
        type: choice
        options:
          - plan
          - apply
          - destroy

permissions:
  contents: read

env:
  TF_VERSION: '1.5.0'
  WORKING_DIRECTORY: './terraform'
  # Set environment based on branch: 'prod' for main, 'dev' for dev
  TF_VAR_environment: ${{ github.ref == 'refs/heads/main' && 'prod' || 'dev' }}
  TF_VAR_app_service_plan_sku: 'B1'
  TF_VAR_app_service_plan_tier: 'Basic'
  TF_VAR_health_check_path: '/health'
  TF_VAR_alert_email: 'haripriyaveluchamy@aity.dev'
  TF_VAR_log_retention_days: '30'
  TF_VAR_existing_resource_group_name: 'vibetrader-RAG-rg'
  
  # ARM credentials shared across all Terraform steps
  ARM_CLIENT_ID: ${{ fromJson(secrets.AZURE_CREDENTIALS).clientId }}
  ARM_CLIENT_SECRET: ${{ fromJson(secrets.AZURE_CREDENTIALS).clientSecret }}
  ARM_SUBSCRIPTION_ID: ${{ fromJson(secrets.AZURE_CREDENTIALS).subscriptionId }}
  ARM_TENANT_ID: ${{ fromJson(secrets.AZURE_CREDENTIALS).tenantId }}
  ARM_USE_OIDC: false
  
  # App settings
  TF_VAR_app_settings: |
    {
      WEBSITES_ENABLE_APP_SERVICE_STORAGE = "false"
      WEBSITES_PORT = "8000"
      SCM_DO_BUILD_DURING_DEPLOYMENT = "true"
      ENABLE_ORYX_BUILD = "true"
      PYTHON_VERSION = "3.12"
      ENVIRONMENT = ${{ github.ref == 'refs/heads/main' && '"production"' || '"development"' }}
      HEALTH_CHECK_ENABLED = "true"
      API_HOST = "0.0.0.0"
      API_PORT = "8000"
      AZURE_OPENAI_API_VERSION = "2025-01-01-preview"
      AZURE_OPENAI_EMBEDDING_MODEL = "text-embedding-3-large"
      EMBEDDING_DIMENSION = "3072"
      QDRANT_COLLECTION_NAME = "news_articles"
      CACHE_TTL = "3600"
      DEFAULT_ARTICLE_LIMIT = "50"
      MAX_ARTICLE_CONTENT_CHARS = "10000"
      MAX_CHUNK_SIZE = "1000"
      SUMMARY_CACHE_SIZE = "1000"
      SUMMARY_CACHE_TTL = "3600"
    }

jobs:
  terraform:
    name: 'Terraform Multi-Region'
    # Only run infra jobs in the main repo, never in forks
    if: github.repository == 'VibeTrader/NewsRag-api'
    runs-on: ubuntu-latest
    environment: production
    
    defaults:
      run:
        shell: bash
        working-directory: ${{ env.WORKING_DIRECTORY }}
    
    outputs:
      us_app_service_name: ${{ steps.terraform_outputs.outputs.us_app_service_name }}
      europe_app_service_name: ${{ steps.terraform_outputs.outputs.europe_app_service_name }}
      india_app_service_name: ${{ steps.terraform_outputs.outputs.india_app_service_name }}
      resource_group_name: ${{ steps.terraform_outputs.outputs.resource_group_name }}
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}


    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Terraform Init
      run: |
        echo "Getting storage account key for backend..."
        STORAGE_KEY=$(az storage account keys list \
          --resource-group terraform-state-rg \
          --account-name tfstatevraag \
          --query '[0].value' \
          --output tsv)
        
        echo "Initializing Terraform backend..."
        terraform init \
          -backend-config="subscription_id=${{ secrets.AZURE_SUBSCRIPTION_ID }}" \
          -backend-config="resource_group_name=terraform-state-rg" \
          -backend-config="storage_account_name=tfstatevraag" \
          -backend-config="container_name=terraform-state" \
          -backend-config="key=newsraag-${{ env.TF_VAR_environment }}.tfstate" \
          -backend-config="access_key=$STORAGE_KEY"
        
        echo "âœ“ Terraform initialized successfully"

    - name: Terraform Plan
      if: github.event.inputs.action != 'destroy'
      run: |
        echo "Creating deployment plan..."
        terraform plan -out=tfplan

    - name: Terraform Apply
      if: github.event.inputs.action == 'apply' || github.event_name == 'push'
      run: |
        echo "Applying Terraform configuration..."
        terraform apply -auto-approve tfplan
      
    - name: Terraform Destroy
      # Only allow destroy from the main repo, never from forks
      if: github.repository == 'VibeTrader/NewsRag-api' && github.event.inputs.action == 'destroy'
      run: |
        echo "Running terraform destroy..."
        
        # Run destroy
        terraform destroy -auto-approve
        
    - name: Get Terraform Outputs
      if: github.event.inputs.action != 'destroy' || github.event_name == 'push'
      id: terraform_outputs
      run: |
        echo "Retrieving Terraform outputs..."
        echo "us_app_service_name=$(terraform output -raw us_app_service_name)" >> $GITHUB_OUTPUT
        echo "europe_app_service_name=$(terraform output -raw europe_app_service_name)" >> $GITHUB_OUTPUT
        echo "india_app_service_name=$(terraform output -raw india_app_service_name)" >> $GITHUB_OUTPUT
        echo "resource_group_name=$(terraform output -raw existing_resource_group_name)" >> $GITHUB_OUTPUT

  configure_app_settings:
    name: 'Configure App Settings with Secrets'
    needs: terraform
    if: github.repository == 'VibeTrader/NewsRag-api' && (github.event.inputs.action != 'destroy' || github.event_name == 'push')
    runs-on: ubuntu-latest
    environment: production
    
    strategy:
      matrix:
        # Only include India region in prod, not dev
        region: ${{ fromJson(github.ref == 'refs/heads/main' && format('[{{"name":"US","app_name":"{0}","short_name":"us","location":"East US"}},{{"name":"Europe","app_name":"{1}","short_name":"eu","location":"North Europe"}},{{"name":"India","app_name":"{2}","short_name":"in","location":"Central India"}}]', needs.terraform.outputs.us_app_service_name, needs.terraform.outputs.europe_app_service_name, needs.terraform.outputs.india_app_service_name) || format('[{{"name":"US","app_name":"{0}","short_name":"us","location":"East US"}},{{"name":"Europe","app_name":"{1}","short_name":"eu","location":"North Europe"}}]', needs.terraform.outputs.us_app_service_name, needs.terraform.outputs.europe_app_service_name)) }}
    
    steps:
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Configure App Settings for ${{ matrix.region.name }}
      run: |
        echo "ðŸ”§ Configuring app settings for ${{ matrix.region.name }} region..."
        
        az webapp config appsettings set \
          --name ${{ matrix.region.app_name }} \
          --resource-group ${{ needs.terraform.outputs.resource_group_name }} \
          --settings \
            DEPLOYMENT_REGION="${{ matrix.region.short_name }}" \
            AZURE_REGION="${{ matrix.region.location }}" \
            ENVIRONMENT="production" \
            PORT="8000" \
            API_HOST="0.0.0.0" \
            API_PORT="8000" \
            PYTHONUNBUFFERED="1" \
            HEALTH_CHECK_ENABLED="true" \
            WEBSITES_PORT="8000" \
            WEBSITES_ENABLE_APP_SERVICE_STORAGE="false" \
            SCM_DO_BUILD_DURING_DEPLOYMENT="true" \
            ENABLE_ORYX_BUILD="true" \
            OPENAI_API_KEY="${{ secrets.OPENAI_API_KEY }}" \
            OPENAI_BASE_URL="${{ secrets.OPENAI_BASE_URL }}" \
            AZURE_OPENAI_API_VERSION="2024-02-01" \
            AZURE_OPENAI_DEPLOYMENT="${{ secrets.AZURE_OPENAI_DEPLOYMENT }}" \
            AZURE_OPENAI_EMBEDDING_DEPLOYMENT="${{ secrets.AZURE_OPENAI_EMBEDDING_DEPLOYMENT }}" \
            AZURE_OPENAI_EMBEDDING_MODEL="${{ secrets.AZURE_OPENAI_EMBEDDING_MODEL }}" \
            EMBEDDING_DIMENSION="3072" \
            QDRANT_URL="${{ secrets.QDRANT_URL }}" \
            QDRANT_API_KEY="${{ secrets.QDRANT_API_KEY }}" \
            QDRANT_COLLECTION_NAME="${{ secrets.QDRANT_COLLECTION_NAME }}" \
            CACHE_TTL="3600" \
            DEFAULT_ARTICLE_LIMIT="50" \
            MAX_ARTICLE_CONTENT_CHARS="10000" \
            MAX_CHUNK_SIZE="1000" \
            SUMMARY_CACHE_SIZE="1000" \
            SUMMARY_CACHE_TTL="3600"

        echo "âœ… App settings configured for ${{ matrix.region.name }}"

  infrastructure_complete:
    name: 'Infrastructure Deployment Complete'
    needs: [terraform, configure_app_settings]
    if: github.repository == 'VibeTrader/NewsRag-api' && (github.event.inputs.action != 'destroy' || github.event_name == 'push')
    runs-on: ubuntu-latest
    
    steps:
    - name: Infrastructure Deployment Summary
      run: |
        echo "ðŸŽ‰ Infrastructure deployment completed successfully!"
        echo "ðŸ“Š Infrastructure Summary:"
        echo "  â€¢ US App Service: ${{ needs.terraform.outputs.us_app_service_name }}"
        echo "  â€¢ Europe App Service: ${{ needs.terraform.outputs.europe_app_service_name }}"
        echo "  â€¢ India App Service: ${{ needs.terraform.outputs.india_app_service_name }}"
        echo "  â€¢ Resource Group: ${{ needs.terraform.outputs.resource_group_name }}"
        echo ""
        echo "âœ… Infrastructure is ready for app deployment!"
        echo "âœ… App settings configured with secrets for all regions!"
        echo "ðŸš€ Your apps should now start successfully with proper configuration!"
